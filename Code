//CipherSchools Assignment
//C(gcc 5.4)
#include <stdio.h>
#include <string.h>
int main() {
	int test;
	scanf("%d",&test);
	while(test>0){
	    char str[100000];
	    char temp;
	    scanf("%c",&temp);
	    scanf("%[^\n]",&str);
	    int len = strlen(str);
	    char arr[len];
	    int i=0;
	    int j=0;
        int flag=0;
        //inner while loop starts for checking balanced brackets
	    while(i<len){
	      if(str[i]==' '){
             // if space is present do nothing
	      }
	      // if any opening brackets are present add into array 'arr'
	     else if(str[i]=='['||str[i]=='('||str[i]=='{'){
	          if(j>=0 && j<len){
	          arr[j]=str[i];
	          j++;
	          }
	      }
	      // if closing bracket present compare with arr rightmost element,
	      //if matched delete rightmost element from arr
	      //if not matched print "NO" and assign flag=1 and break the loop
	      else if(str[i]==']'){
	          if(arr[j-1]=='['){
	              j--;
	          }
	          else{
	              printf("NO");
	              flag=1;
	              break;
	          }
	      }
	      else if(str[i]==')'){
	          if(arr[j-1]=='('){
	              j--;
	          }
	          else{
	              printf("NO");
	               flag=1;
	              break;
	          } 
	      }
	      else if(str[i]=='}'){
	           if(arr[j-1]=='{'){
	              j--;
	          }
	          else{
	              printf("NO");
	               flag=1;
	              break;
	          }
	      }
	      i++;
	    }//inner while loop ends
	    //check if arr is empty or not
	    if(flag==0){
	    if(j==0 && (arr[j]!='['||arr[j]!='('||arr[j]!='{')){
	        printf("YES");
	    }
	    else{
	        printf("NO");
	    }
	    }
	    printf("\n");
	    test--;
	}
	return 0;
}
